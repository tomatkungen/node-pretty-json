"use strict";

var _prettyPrint = require("./pretty-print");

//let example1 = [1,[1]];
//let example1 = [1,2,3,[4,5,6,[7,8,9]],[10,11,13,14,15],[1,2,3]];
//let example1 = [1,2,3,[4,5,6,[1,2,3,4,5]],7,8,[11,10, 12, 13]];
//let example1 = ['1',2,3,[4,5,6,[1,2,3,4,undefined]],7,8,[null,10, true, false]];
//let example1 = {a:2,b:2,c:{a:1,b: [1,2,true], d: true, e: undefined}};
let example1 = [{
  a: 2,
  b: 2
}, '1', 2, 3, [4, 5, 6, [1, 2, 3, 4, undefined]], 7, 8, [null, 10, true, false]];
console.log(_prettyPrint.cPrettyPrint.prettyPrint(example1, 2, 0));
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cPrettyPrint = exports.eToken = void 0;

var _prettyUtil = require("./pretty-util");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

let eToken;
exports.eToken = eToken;

(function (eToken) {
  eToken["START_CURLY_SQUARE_BRACKET"] = "{";
  eToken["END_CURLY_SQUARE_BRACKET"] = "}";
  eToken["START_SQUARE_BRACKET"] = "[";
  eToken["END_SQUARE_BRACKET"] = "]";
  eToken["DELIMITER"] = ",";
  eToken["CARRIGE_RETURN"] = "\n";
  eToken["SPACE"] = "  ";
  eToken["VALUE"] = "value";
  eToken["NULL"] = "null";
})(eToken || (exports.eToken = eToken = {}));

;

class cPrettyPrint {
  constructor() {
    this.prevToken = eToken.NULL;
  }

  static prettyPrint(value, propertyBreak, indent) {
    return new cPrettyPrint().state(value, {
      propertyBreak,
      indent,
      currentIndex: 0,
      currentLength: 0
    });
  }

  state(value, config) {
    // Array
    const aryLines = _prettyUtil.cPrettyUtil.isArray(value) && this.prtArray(value, _objectSpread(_objectSpread({}, config), {}, {
      indent: config.indent + 1
    })) || ''; // Object

    const objLines = _prettyUtil.cPrettyUtil.isObject(value) && this.prtObject(value, _objectSpread(_objectSpread({}, config), {}, {
      indent: config.indent + 1
    })) || ''; // Number

    const numLine = _prettyUtil.cPrettyUtil.isNumber(value) && this.prtToken(value, config) || ''; // boolean

    const bolLine = _prettyUtil.cPrettyUtil.isBoolean(value) && this.prtToken("".concat(value), config) || ''; // // String

    const strLine = _prettyUtil.cPrettyUtil.isString(value) && this.prtToken("'".concat(value, "'"), config) || ''; // null

    const undefinedLine = _prettyUtil.cPrettyUtil.isUndefined(value) && this.prtToken("undefined", config) || ''; // undefined

    const nullLine = _prettyUtil.cPrettyUtil.isNull(value) && this.prtToken("null", config) || ''; // symbol

    const symbolLine = _prettyUtil.cPrettyUtil.isSymbol(value) && this.prtToken("symbol", config) || '';
    return "".concat(symbolLine).concat(nullLine).concat(undefinedLine).concat(strLine).concat(bolLine).concat(numLine).concat(aryLines).concat(objLines);
  }

  prtObject(obj, config) {
    const strBeginBracketsLine = this.prtBeginBracket(config, eToken.START_CURLY_SQUARE_BRACKET);
    const objLines = Object.keys(obj).map((key, index) => {
      config.currentIndex = index;
      config.currentLength = Object.keys(obj).length;

      if (_prettyUtil.cPrettyUtil.isArray(obj[key]) || _prettyUtil.cPrettyUtil.isObject(obj[key]) || _prettyUtil.cPrettyUtil.isSymbol(obj[key])) {
        const objState = this.state(obj[key], config);
        return "".concat(objState);
      }

      return this.prtToken("".concat(key, ": ").concat(String(obj[key])), config);
    }).join('');
    const strEndBracketsLine = this.prtEndBracket(config, eToken.END_CURLY_SQUARE_BRACKET);
    return "".concat(strBeginBracketsLine).concat(objLines).concat(strEndBracketsLine);
  }

  prtArray(ary, config) {
    const strBeginBracketsLine = this.prtBeginBracket(config, eToken.START_SQUARE_BRACKET);
    const aryLines = ary.map((currentValue, index, ary) => {
      config.currentIndex = index;
      config.currentLength = ary.length;
      const aryState = this.state(currentValue, config);
      return "".concat(aryState);
    }).join('');
    const strEndBracketsLine = this.prtEndBracket(config, eToken.END_SQUARE_BRACKET);
    return "".concat(strBeginBracketsLine).concat(aryLines).concat(strEndBracketsLine);
  }

  prtToken(value, config) {
    return [_prettyUtil.cPrettyUtil.isSpace(config, this.prevToken) && this.prtSpaces(config.indent) || '', this.prtValue(value), _prettyUtil.cPrettyUtil.isDelimiter(config) && this.prtDelimiter() || '', (_prettyUtil.cPrettyUtil.isCarriageReturn(config) || !_prettyUtil.cPrettyUtil.isDelimiter(config)) && this.prtCarriageReturn() || ''].join('');
  }

  prtBeginBracket(config, bracket) {
    return [this.prevToken !== eToken.CARRIGE_RETURN && this.prevToken !== eToken.NULL && this.prtCarriageReturn() || '', this.prtSpaces(config.indent - 1), bracket, this.prtCarriageReturn()].join('');
  }

  prtEndBracket(config, bracket) {
    return [this.prevToken !== eToken.NULL && this.prevToken !== eToken.CARRIGE_RETURN && this.prtCarriageReturn() || '', this.prtSpaces(config.indent - 1), bracket, (_prettyUtil.cPrettyUtil.isDelimiter(config) || config.indent >= 2) && this.prtDelimiter() || '', this.prtCarriageReturn()].join('');
  }

  prtValue(value) {
    this.prevToken = eToken.VALUE;
    return value;
  }

  prtSpaces(numSpaces) {
    this.prevToken = eToken.SPACE;
    return new Array(2 * numSpaces + 1).join(eToken.SPACE);
  }

  prtDelimiter() {
    this.prevToken = eToken.DELIMITER;
    return eToken.DELIMITER;
  }

  prtCarriageReturn() {
    this.prevToken = eToken.CARRIGE_RETURN;
    return eToken.CARRIGE_RETURN;
  }

  prtStartSquareBracket() {
    this.prevToken = eToken.START_SQUARE_BRACKET;
    return eToken.START_SQUARE_BRACKET;
  }

  prtEndSquareBracket() {
    this.prevToken = eToken.END_SQUARE_BRACKET;
    return eToken.END_SQUARE_BRACKET;
  }

}

exports.cPrettyPrint = cPrettyPrint;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cPrettyUtil = void 0;

var _prettyPrint = require("./pretty-print");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class cPrettyUtil {
  static isArray(value) {
    return Array.isArray(value);
  }

  static isNumber(value) {
    return typeof value === 'number';
  }

  static isBoolean(value) {
    return typeof value === 'boolean';
  }

  static isObject(value) {
    return typeof value === 'object' && !Array.isArray(value) && value !== null;
  }

  static isUndefined(value) {
    return value === undefined;
  }

  static isNull(value) {
    return value === null;
  }

  static isString(value) {
    return typeof value === 'string';
  }

  static isSymbol(value) {
    return typeof value === 'symbol';
  }

  static isSpace(config, prevToken) {
    if (config.currentIndex === 0) return true;
    return cPrettyUtil.isCarriageReturn(_objectSpread(_objectSpread({}, config), {}, {
      currentIndex: config.currentIndex - 1
    })) || prevToken === _prettyPrint.eToken.CARRIGE_RETURN;
  }

  static isCarriageReturn(config) {
    if (config.propertyBreak === 0) return true;
    return (config.currentIndex + 1) % config.propertyBreak === 0;
  }

  static isDelimiter(config) {
    return config.currentIndex !== config.currentLength - 1;
  }

}

exports.cPrettyUtil = cPrettyUtil;
